import smbl
import os.path
import shutil
import platform

for i, plugin in enumerate(smbl.prog.plugins.get_registered_plugins()):
	print("plugin",plugin)
	rule:
		output:
			plugin.get_installation_files()
		params:
			i=str(i),
		priority:
			plugin.get_priority()
		run:
			(smbl.prog.plugins.get_registered_plugins()[int(params.i)].install_all_steps)()

for i, rule in enumerate(smbl.prog.plugins.get_registered_rules()):
	rule:
		input:
			rule.get_input()
		output:
			rule.get_output()
		params:
			i=str(i),
		priority:
			rule.get_priority()
		run:
			smbl.prog.plugins.get_registered_rules()[int(params.i)].run()




_SUFFIX_INSTALLATION="Please, be patient, it can last some time."

# SamTools cannot be compiled on OpenSuse because it normally requires 
# the curses library instead of ncurses
def correct_samtools_make(makefile_fn):
	makefile_backup_fn = makefile_fn+".backup"
	if not os.path.isfile(makefile_backup_fn):
		with open(makefile_fn, 'r') as makefile:
			content = makefile.read()
			if smbl.is_linux():
				content = content.replace("-lcurses","-lncurses")
			elif smbl.is_cygwin():
				content = content.replace("-D_FILE_OFFSET_BITS=64","-D_FILE_OFFSET_BITS=64 -Dexpl=exp -Dlogl=log")
		with open(makefile_fn, 'w') as makefile:
			makefile.write(content)

rule __test_all_progs__:
	input:
		smbl.prog.ALL

rule prog_art:
	message:
		"Installing ART (an NGS read simulator). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.ART_ILLUMINA,
		smbl.prog.ART_SOLID,
		smbl.prog.ART_454
	params:
		src=os.path.join(smbl.src_dir,"art"),
		dir="art_bin_VanillaIceCream"
	run:
		if (smbl.is_linux() or smbl.is_cygwin()) and smbl.is_os_64bit():
			url="http://www.niehs.nih.gov/research/resources/assets/docs/artbinvanillaicecream031114linux64tgz.tgz"
		elif (smbl.is_linux() or smbl.is_cygwin()):
			url="http://www.niehs.nih.gov/research/resources/assets/docs/artbinvanillaicecream031114linux32tgz.tgz"
		elif smbl.is_mac() and smbl.is_os_64bit():
			url="http://www.niehs.nih.gov/research/resources/assets/docs/artbinvanillaicecream031114macos64tgz.tgz"
		elif smbl.is_mac():
			url="http://www.niehs.nih.gov/research/resources/assets/docs/artbinvanillaicecream031114macos32tgz.tgz"
		else:
			raise NotImplementedError("Unsupported OS")

		shell(
			"""
				(
					rm -fR "{params.src}"
					mkdir -p "{params.src}"
				) > /dev/null

				curl -L --insecure -o "{params.src}/art.tgz" \""""+ url + """\"

				(
					cd "{params.src}"

					tar xf art.tgz
					cp "{params.src}/{params.dir}/art_illumina" "{output[0]}"
					cp "{params.src}/{params.dir}/art_SOLiD" "{output[1]}"
					cp "{params.src}/{params.dir}/art_454" "{output[2]}"

					rm -fR "{params.src}"
				) > /dev/null
			"""
		)

rule prog_sambamba:
	message:
		"Installing Sambamba (a tool for manipulation with SAM, BAM and CRAM files). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.SAMBAMBA,
	params:
		src=os.path.join(smbl.src_dir,"sambamba"),
	run:
		if (smbl.is_linux() or smbl.is_cygwin()):
			url="http://github.com/lomereiter/sambamba/releases/download/v0.5.1/sambamba_v0.5.1_linux.tar.bz2"
		elif smbl.is_mac():
			url="http://github.com/lomereiter/sambamba/releases/download/v0.5.1/sambamba_v0.5.1_osx.tar.bz2"
		else:
			raise NotImplementedError("Unsupported OS")

		shell(
			"""
				(
					rm -fR "{params.src}"
					mkdir -p "{params.src}"
				) > /dev/null

				curl -L --insecure -o "{params.src}/sambamba.tar.bz2" \""""+ url + """\"
		
				(
					cd "{params.src}"
					tar xf sambamba.tar.bz2
					cp "{params.src}/sambamba_v0.5.1" "{output[0]}"
					rm -fR "{params.src}"
				) > /dev/null
			"""
		)


rule prog_picardtools:
	message:
		"Installing Picard Tools. "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.PICARD
	params:
		src=os.path.join(smbl.src_dir,"picard"),
	run:
		shell(
			"""
				(
					rm -fR "{params.src}"
					mkdir -p "{params.src}"
				) > /dev/null

				curl -L --insecure -o "{params.src}/picard-tools-1.129.zip" "https://github.com/broadinstitute/picard/releases/download/1.129/picard-tools-1.129.zip"

				(
					cd "{params.src}"

					unzip picard-tools-1.129.zip
					cd picard-tools-1.129
					chmod +x picard.jar
					cp picard.jar "{output[0]}"

					rm -fR "{params.src}"
				) > /dev/null
			"""
		)


rule prog_storm:
	message:
		"Compiling SToRM (an NGS read mapper). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.STORM_NUCLEOTIDE,
		smbl.prog.STORM_COLOR
	params:
		src=os.path.join(smbl.src_dir,"storm")
	shell:
		"""
			(
				rm -fR "{params.src}"
				mkdir -p "{params.src}"
				cd "{params.src}"

				svn checkout svn://scm.gforge.inria.fr/svnroot/storm/trunk storm
				cd storm
				make -j
				cp "{params.src}/storm/storm-nucleotide" "{output[0]}"
				cp "{params.src}/storm/storm-color" "{output[1]}"

				rm -fR "{params.src}"
			) > /dev/null
		"""

rule prog_mason:
	message:
		"Installing Mason (an NGS read simulator). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.MASON_FRAG_SEQUENCING,
		smbl.prog.MASON_GENOME,
		smbl.prog.MASON_MATERIALIZER,
		smbl.prog.MASON_METHYLATION,
		smbl.prog.MASON_SIMULATOR,
		smbl.prog.MASON_SPLICING,
		smbl.prog.MASON_VARIATOR,
	params:
		src=os.path.join(smbl.src_dir,"mason")
	run:
		if (smbl.is_linux() or smbl.is_cygwin()) and smbl.is_os_64bit():
			url="http://packages.seqan.de/mason2/mason2-2.0.0-Linux-x86_64.tar.bz2"
			dir="mason2-2.0.0-Linux-x86_64"
		elif (smbl.is_linux() or smbl.is_cygwin()):
			url="http://packages.seqan.de/mason2/mason2-2.0.0-Linux-i686.tar.bz2"
			dir="mason2-2.0.0-Linux-i686"
		elif smbl.is_mac() and smbl.is_os_64bit():
			url="http://packages.seqan.de/mason2/mason2-2.0.0-Mac-x86_64.tar.bz2"
			dir="mason2-2.0.0-Mac-x86_64"
		elif smbl.is_mac():
			url="http://packages.seqan.de/mason2/mason2-2.0.0-Mac-i686.tar.bz2"
			dir="mason2-2.0.0-Mac-i686"
		else:
			raise NotImplementedError("Unsupported OS")

		shell(
			"""
				(
					rm -fR "{params.src}"
					mkdir -p "{params.src}"
				) > /dev/null

				curl -L --insecure -o "{params.src}/mason.tar.bz2" \""""+ url + """\"

				(
					cd \"{params.src}\"
					tar xf mason.tar.bz2
					cd \"{params.src}/"""+dir+"""/bin\"

					cp "mason_frag_sequencing" "{output[0]}"
					cp "mason_genome" "{output[1]}"
					cp "mason_materializer" "{output[2]}"
					cp "mason_methylation" "{output[3]}"
					cp "mason_simulator" "{output[4]}"
					cp "mason_splicing" "{output[5]}"
					cp "mason_variator" "{output[6]}"

					rm -fR "{params.src}"
				) > /dev/null
			"""
		)

rule prog_bfast:
	message:
		"Installing BFast (an NGS read mapper). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.BFAST
	params:
		src=os.path.join(smbl.src_dir,"bfast")
	shell:
		"""
			(
				rm -fR "{params.src}"
				mkdir -p "{params.src}"
				cd "{params.src}"

				git clone --depth 1 http://github.com/nh13/bfast
				cd bfast
				sh autogen.sh
				./configure
				make -j
				cp "{params.src}/bfast/bfast/bfast" "{output[0]}"

				rm -fR "{params.src}"
			) > /dev/null
		"""

rule prog_gem:
	message:
		"Installing GEM (an NGS read mapper). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.GEM_INDEXER,
		smbl.prog.GEM_MAPPER,
		smbl.prog.GEM_2_SAM
	params:
		src=os.path.join(smbl.src_dir,"gem")
	run:
		if not (smbl.is_linux() or smbl.is_cygwin()):
			raise NotImplementedError("Unsupported OS")

		shell(
			"""
				(
					rm -fR "{params.src}"
					mkdir -p "{params.src}"
				) > /dev/null

				curl -L --insecure -o "{params.src}/gem.tbz2" "http://sourceforge.net/projects/gemlibrary/files/gem-library/Binary%20pre-release%203/GEM-binaries-Linux-x86_64-core_i3-20130406-045632.tbz2/download"

				(
					cd "{params.src}"

					tar xf gem.tbz2
					cd GEM-binaries-Linux-x86_64-core_i3-20130406-045632/bin
					cp gem-indexer "{output[0]}"
					cp gem-mapper "{output[1]}"
					cp gem-2-sam "{output[2]}"

					rm -fR "{params.src}"
				) > /dev/nullcp
			"""
		)



rule prog_curesim:
	message:
		"Installing CuReSim (an NGS read simulator). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.CURESIM,
	params:
		src=os.path.join(smbl.src_dir,"curesim"),
	shell:
		"""
			(
				rm -fR "{params.src}"
				mkdir -p "{params.src}"
			) > /dev/null

			curl -L --insecure -o "{params.src}/curesim.zip" "http://www.pegase-biosciences.com/wp-content/uploads/2013/04/CuReSim1.1.zip"

			(
				cd "{params.src}"

				unzip curesim.zip
				cd CuReSim1.1
				cp CuReSim.jar "{output[0]}"
				chmod +x "{output[0]}"

				rm -fR "{params.src}"
			)
		"""


rule prog_curesim_eval:
	message:
		"Installing CuReSim_eval (an evalution tool for CuReSim). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.CURESIM_EVAL,
	params:
		src=os.path.join(smbl.src_dir,"curesim_eval"),
	shell:
		"""
			(
				rm -fR "{params.src}"
				mkdir -p "{params.src}"
			) > /dev/null

			curl -L --insecure -o "{params.src}/curesim_eval.zip" "http://www.pegase-biosciences.com/wp-content/uploads/2013/04/CuReSimEval1.1.zip"

			(
				cd "{params.src}"

				unzip curesim_eval.zip
				cd CuReSimEval1.1
				cp CuReSimEval.jar "{output[0]}"
				chmod +x "{output[0]}"

				rm -fR "{params.src}"
			) > /dev/null
		"""


rule prog_twobittofa:
	message:
		"Installing twoBitToFa (a tool for conversion of genomic data). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.TWOBITTOFA
	run:
		if (smbl.is_linux() or smbl.is_cygwin()) and smbl.is_os_64bit:
			url="http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/twoBitToFa"
		elif smbl.is_mac() and smbl.is_os_64bit:
			url="http://hgdownload.cse.ucsc.edu/admin/exe/macOSX.x86_64/twoBitToFa"
		elif smbl.is_mac():
			url="http://hgdownload.cse.ucsc.edu/admin/exe/macOSX.i386/twoBitToFa"
		else:
			raise NotImplementedError("For your OS, twoBitToFa is not precompiled")

		shell("""
			curl -L --insecure -o "{prog}" "{url}"
			chmod +x "{prog}"
		""".format(prog=output[0],url=url))
