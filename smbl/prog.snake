import smbl
import os.path
import shutil
import platform

# SamTools cannot be compiled on OpenSuse because it normally requires 
# the curses library instead of ncurses
def correct_samtools_make(makefile_fn):
	makefile_backup_fn = makefile_fn+".backup"
	if not os.path.isfile(makefile_backup_fn):
		with open(makefile_fn, 'r') as makefile:
			content = makefile.read()
			content = content.replace("-lcurses","-lncurses")
		with open(makefile_fn, 'w') as makefile:
			makefile.write(content)

rule __test_all_progs__:
	input:
		smbl.prog.ALL

rule prog_art:
	message:
		"Compiling ART"
	output:
		smbl.prog.ART_ILLUMINA,
		smbl.prog.ART_SOLID,
		smbl.prog.ART_454
	params:
		src=smbl.src_dir,
		dir="art_bin_VanillaIceCream"
	run:
		if smbl.is_linux() and smbl.is_os_64bit:
			url="http://www.niehs.nih.gov/research/resources/assets/docs/artbinvanillaicecream031114linux64tgz.tgz"
		elif smbl.is_linux():
			url="http://www.niehs.nih.gov/research/resources/assets/docs/artbinvanillaicecream031114linux32tgz.tgz"
		elif smbl.is_mac() and smbl.is_os_64bit:
			url="http://www.niehs.nih.gov/research/resources/assets/docs/artbinvanillaicecream031114macos64tgz.tgz"
		elif smbl.is_mac():
			url="http://www.niehs.nih.gov/research/resources/assets/docs/artbinvanillaicecream031114macos32tgz.tgz"
		else:
			raise RunTimeError("Unsupported OS")

		shell(
		"""
			rm -fR {params.src}/art
			mkdir -p {params.src}/art
			cd {params.src}/art
			curl -o art.tgz """+ url + """
			tar xvf art.tgz
			cp {params.src}/art/{params.dir}/art_illumina {output[0]}
			cp {params.src}/art/{params.dir}/art_SOLiD {output[1]}
			cp {params.src}/art/{params.dir}/art_454 {output[2]}
			#rm -fR {params.src}/art
		"""
		)

rule prog_bcftools:
	message:
		"Compiling BcfTools"
	output:
		smbl.prog.BCFTOOLS
	params:
		src=smbl.src_dir
	shell:
		"""
			rm -fR {params.src}/bcftools
			mkdir -p {params.src}/bcftools
			cd {params.src}/bcftools
			git clone --depth=1 http://github.com/samtools/bcftools
			git clone --depth=1 http://github.com/samtools/htslib
			cd bcftools
			make
			cp {params.src}/bcftools/bcftools/bcftools {output[0]}
			rm -fR {params.src}/bcftools
		"""

rule prog_dwgsim:
	message:
		"Compiling DwgSim"
	output:
		smbl.prog.DWGSIM,
		smbl.prog.DWGSIM_EVAL
	params:
		src=smbl.src_dir
	run:
		shell(
			"""
				rm -fR {params.src}/dwgsim
				mkdir -p {params.src}/dwgsim
				cd {params.src}/dwgsim
				git clone --depth=1 http://github.com/nh13/dwgsim
				cd dwgsim
				git submodule init
				git submodule update
			"""
		)
		correct_samtools_make(os.path.join(smbl.src_dir,"dwgsim","dwgsim","samtools","Makefile"))
		shell(
			"""
				cd {params.src}/dwgsim/dwgsim
				make
				cp {params.src}/dwgsim/dwgsim/dwgsim {output[0]}
				cp {params.src}/dwgsim/dwgsim/dwgsim_eval {output[1]}
				rm -fR {params.src}/dwgsim
			"""
		)

rule prog_wgsim:
	message:
		"Compiling WgSim"
	output:
		smbl.prog.WGSIM,
		smbl.prog.WGSIM_EVAL
	params:
		src=smbl.src_dir
	run:
		shell(
			"""
				rm -fR {params.src}/wgsim
				mkdir -p {params.src}/wgsim
				cd {params.src}/wgsim
				git clone --depth=1 http://github.com/lh3/wgsim
				cd wgsim
				gcc -g -O2 -Wall -o wgsim wgsim.c -lz -lm
				cp {params.src}/wgsim/wgsim/wgsim {output[0]}
				cp {params.src}/wgsim/wgsim/wgsim_eval.pl {output[1]}
				rm -fR {params.src}/wgsim
			"""
		)

# BWA
rule prog_bwa:
	message:
		"Compiling BWA "
	output:
		smbl.prog.BWA
	params:
		src=smbl.src_dir
	shell:
		"""
			rm -fR {params.src}/bwa
			mkdir -p {params.src}/bwa
			cd {params.src}/bwa
			git clone --depth=1 http://github.com/lh3/bwa
			cd bwa
			make
			cp {params.src}/bwa/bwa/bwa {output[0]}
			rm -fR {params.src}/bwa
		"""

rule prog_htslib:
	message:
		"Compiling HtsLib"
	output:
		smbl.prog.TABIX,
		smbl.prog.BGZIP
	params:
		src=smbl.src_dir
	shell:
		"""
			rm -fR {params.src}/htslib
			mkdir -p {params.src}/htslib
			cd {params.src}/htslib
			git clone --depth=1 --branch=develop http://github.com/samtools/bcftools
			git clone --depth=1 http://github.com/samtools/htslib
			cd htslib
			make
			cp {params.src}/htslib/htslib/tabix {output[0]}
			cp {params.src}/htslib/htslib/bgzip {output[1]}
			rm -fR {params.src}/htslib
		"""

rule prog_samtools:
	message:
		"Compiling SamTools"
	output:
		smbl.prog.SAMTOOLS
	params:
		src=smbl.src_dir
	run:
		shell(
			"""
				rm -fR {params.src}/samtools
				mkdir -p {params.src}/samtools
				cd {params.src}/samtools
				git clone --depth=1 http://github.com/samtools/samtools
				git clone --depth=1 http://github.com/samtools/htslib
			"""
		)
		correct_samtools_make(os.path.join(smbl.src_dir,"samtools","samtools","Makefile"))
		shell(
			"""
				cd {params.src}/samtools/samtools
				make
				cp {params.src}/samtools/samtools/samtools {output[0]}
				rm -fR {params.src}/samtools
			"""
		)

rule prog_storm:
	message:
		"Compiling SToRM"
	output:
		smbl.prog.STORM_NUCLEOTIDE,
		smbl.prog.STORM_COLOR
	params:
		src=os.path.join(smbl.src_dir,"storm")
	run:
		shell(
			"""
				rm -fR {params.src}
				mkdir -p {params.src}
				cd {params.src}
				svn checkout svn://scm.gforge.inria.fr/svnroot/storm/trunk storm
				cd storm
				make
				cp {params.src}/storm/storm-nucleotide {output[0]}
				cp {params.src}/storm/storm-color {output[1]}
				rm -fR {params.src}
			"""
		)

rule prog_mason:
	message:
		"Compiling Mason"
	output:
		smbl.prog.MASON
	params:
		src=os.path.join(smbl.src_dir,"mason")
	run:
		shell(
			"""
				rm -fR {params.src}
				mkdir -p {params.src}
				cd {params.src}
				git clone --depth 1 http://github.com/seqan/seqan/
				cd seqan
				cmake .
				make mason
				cp {params.src}/seqan/bin/mason {output[0]}
				rm -fR {params.src}
			"""
		)

rule prog_bfast:
	message:
		"Compiling BFast"
	output:
		smbl.prog.BFAST
	params:
		src=os.path.join(smbl.src_dir,"bfast")
	run:
		shell(
			"""
				rm -fR {params.src}
				mkdir -p {params.src}
				cd {params.src}
				git clone --depth 1 https://github.com/nh13/bfast
				cd bfast
				sh autogen.sh
				./configure
				make
				cp {params.src}/bfast/bfast/bfast {output[0]}
				rm -fR {params.src}
			"""
		)

rule prog_gem:
	message:
		"Installing GEM"
	output:
		smbl.prog.GEM_INDEXER,
		smbl.prog.GEM_MAPPER,
		smbl.prog.GEM_2_SAM
	params:
		src=os.path.join(smbl.src_dir,"gem")
	run:
		if not smbl.is_linux():
			raise RunTimeError("Unsupported OS")

		shell(
			"""
				rm -fR {params.src}
				mkdir -p {params.src}
				cd {params.src}
				wget -O gem.tbz2 http://sourceforge.net/projects/gemlibrary/files/gem-library/Binary%20pre-release%203/GEM-binaries-Linux-x86_64-core_i3-20130406-045632.tbz2/download
				tar xf gem.tbz2
				cd GEM-binaries-Linux-x86_64-core_i3-20130406-045632/bin
				cp gem-indexer {output[0]}
				cp gem-mapper {output[1]}
				cp gem-2-sam {output[2]}
				rm -fR {params.src}
			"""
		)

rule prog_freec:
	message:
		"Installing FREEC"
	output:
		smbl.prog.FREEC
	params:
		src=os.path.join(smbl.src_dir,"freec")
	run:
		shell(
			"""
				rm -fR {params.src}
				mkdir -p {params.src}
				cd {params.src}
				wget http://bioinfo-out.curie.fr/projects/freec/src/FREEC_Linux64.tar.gz
				tar xf FREEC_Linux64.tar.gz
				make clean
				make
				cp freec {output[0]}
				rm -fR {params.src}
			"""
		)
rule prog_twobittofa:
	message:
		"Downloading twoBitToFa"
	output:
		smbl.prog.TWOBITTOFA
	run:
		if smbl.is_linux() and smbl.is_os_64bit:
			url="http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/twoBitToFa"
		elif smbl.is_mac() and smbl.is_os_64bit:
			url="http://hgdownload.cse.ucsc.edu/admin/exe/macOSX.x86_64/twoBitToFa"
		elif smbl.is_mac():
			url="http://hgdownload.cse.ucsc.edu/admin/exe/macOSX.i386/twoBitToFa"
		else:
			raise RunTimeError("For your OS, twoBitToFa is not precompiled")

		shell("""
			curl --insecure -o {prog} {url}
			chmod +x {prog}
		""".format(prog=output[0],url=url))
