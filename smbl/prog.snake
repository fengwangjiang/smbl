import smbl
import os.path
import shutil
import platform


_SUFFIX_INSTALLATION="Please, be patient, it can last some time."

# SamTools cannot be compiled on OpenSuse because it normally requires 
# the curses library instead of ncurses
def correct_samtools_make(makefile_fn):
	makefile_backup_fn = makefile_fn+".backup"
	if not os.path.isfile(makefile_backup_fn):
		with open(makefile_fn, 'r') as makefile:
			content = makefile.read()
			content = content.replace("-lcurses","-lncurses")
		with open(makefile_fn, 'w') as makefile:
			makefile.write(content)

rule __test_all_progs__:
	input:
		smbl.prog.ALL

rule prog_art:
	message:
		"Installing ART (an NGS read simulator). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.ART_ILLUMINA,
		smbl.prog.ART_SOLID,
		smbl.prog.ART_454
	params:
		src=os.path.join(smbl.src_dir,"art"),
		dir="art_bin_VanillaIceCream"
	run:
		if smbl.is_linux() and smbl.is_os_64bit():
			url="http://www.niehs.nih.gov/research/resources/assets/docs/artbinvanillaicecream031114linux64tgz.tgz"
		elif smbl.is_linux():
			url="http://www.niehs.nih.gov/research/resources/assets/docs/artbinvanillaicecream031114linux32tgz.tgz"
		elif smbl.is_mac() and smbl.is_os_64bit():
			url="http://www.niehs.nih.gov/research/resources/assets/docs/artbinvanillaicecream031114macos64tgz.tgz"
		elif smbl.is_mac():
			url="http://www.niehs.nih.gov/research/resources/assets/docs/artbinvanillaicecream031114macos32tgz.tgz"
		else:
			raise RunTimeError("Unsupported OS")

		shell(
			"""
				(
					rm -fR "{params.src}"
					mkdir -p "{params.src}"
				) > /dev/null

				curl -L --insecure -o "{params.src}/art.tgz" \""""+ url + """\"

				(
					cd "{params.src}"

					tar xf art.tgz
					cp "{params.src}/{params.dir}/art_illumina" "{output[0]}"
					cp "{params.src}/{params.dir}/art_SOLiD" "{output[1]}"
					cp "{params.src}/{params.dir}/art_454" "{output[2]}"

					rm -fR "{params.src}"
				) > /dev/null
			"""
		)

rule prog_sambamba:
	message:
		"Installing Sambamba (a tool for manipulation with SAM, BAM and CRAM files). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.SAMBAMBA,
	params:
		src=os.path.join(smbl.src_dir,"sambamba"),
	run:
		if smbl.is_linux():
			url="http://github.com/lomereiter/sambamba/releases/download/v0.5.1/sambamba_v0.5.1_linux.tar.bz2"
		elif smbl.is_mac():
			url="http://github.com/lomereiter/sambamba/releases/download/v0.5.1/sambamba_v0.5.1_osx.tar.bz2"
		else:
			raise RunTimeError("Unsupported OS")

		shell(
			"""
				(
					rm -fR "{params.src}"
					mkdir -p "{params.src}"
				) > /dev/null

				curl -L --insecure -o "{params.src}/sambamba.tar.bz2" \""""+ url + """\"
		
				(
					cd "{params.src}"
					tar xf sambamba.tar.bz2
					cp "{params.src}/sambamba_v0.5.1" "{output[0]}"
					rm -fR "{params.src}"
				) > /dev/null
			"""
		)

rule prog_bcftools:
	message:
		"Installing BcfTools (a package for manipulation with BCF files). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.BCFTOOLS
	params:
		src=os.path.join(smbl.src_dir,"bcftools")
	shell:
		"""
			(
				rm -fR "{params.src}"
				mkdir -p "{params.src}"
				cd "{params.src}"

				git clone --depth=1 http://github.com/samtools/bcftools
				git clone --depth=1 http://github.com/samtools/htslib
				cd bcftools
				make -j
				cp "{params.src}/bcftools/bcftools" "{output[0]}"

				rm -fR "{params.src}"
			) > /dev/null
		"""

rule prog_dwgsim:
	message:
		"Installing DwgSim (a read simulator). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.DWGSIM,
		smbl.prog.DWGSIM_EVAL
	params:
		src=os.path.join(smbl.src_dir,"dwgsim")
	run:
		shell(
			"""
				(
					rm -fR "{params.src}"
					mkdir -p "{params.src}"
					cd "{params.src}"

					git clone --depth=1 --recursive http://github.com/nh13/dwgsim
				) > /dev/null
			"""
		)
		correct_samtools_make(os.path.join(params.src,"dwgsim","samtools","Makefile"))
		shell(
			"""
				(
					cd "{params.src}/dwgsim"
					make -j
					cp "{params.src}/dwgsim/dwgsim" "{output[0]}"
					cp "{params.src}/dwgsim/dwgsim_eval" "{output[1]}"
	
					rm -fR "{params.src}"
				) > /dev/null
		"""
		)

rule prog_wgsim:
	message:
		"Compiling WgSim (an NGS read simulator). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.WGSIM,
		smbl.prog.WGSIM_EVAL
	params:
		src=os.path.join(smbl.src_dir,"wgsim")
	run:
		shell(
			"""
				(
					rm -fR "{params.src}"
					mkdir -p "{params.src}"
					cd "{params.src}"

					git clone --depth=1 http://github.com/lh3/wgsim
					cd wgsim
					gcc -g -O2 -Wall -o wgsim wgsim.c -lz -lm
					cp "{params.src}/wgsim/wgsim" "{output[0]}"
					cp "{params.src}/wgsim/wgsim_eval.pl" "{output[1]}"

					rm -fR "{params.src}"
				) > /dev/null

			"""
		)

rule prog_xs:
	message:
		"Compiling XS (an NGS read simulator). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.XS
	params:
		src=os.path.join(smbl.src_dir,"xs")
	run:
		shell(
			"""
				(
					rm -fR "{params.src}"
					mkdir -p "{params.src}"
				) > /dev/null

				curl -L --insecure -o "{params.src}/xs.tar.gz" "http://exon.ieeta.pt/xs/xs.tar.gz"

				(
					cd "{params.src}"

					tar xf xs.tar.gz
					cd xs
					make -j
					cp XS "{output[0]}"

					rm -fR "{params.src}"
				) > /dev/null
			"""
		)


# BWA
rule prog_bwa:
	message:
		"Compiling BWA (an NGS read mapper). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.BWA
	params:
		src=os.path.join(smbl.src_dir,"bwa")
	shell:
		"""
			(
				rm -fR "{params.src}"
				mkdir -p "{params.src}"
				cd "{params.src}"

				git clone --depth=1 http://github.com/lh3/bwa
				cd bwa
				make -j
				cp "{params.src}/bwa/bwa" "{output[0]}"

				rm -fR "{params.src}"
			) > /dev/null

		"""

rule prog_htslib:
	message:
		"Installing Tabix and BgZip (tools for manipulation with special formats). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.TABIX,
		smbl.prog.BGZIP
	params:
		src=os.path.join(smbl.src_dir,"htslib")
	shell:
		"""
			(
				rm -fR "{params.src}"
				mkdir -p "{params.src}"
				cd "{params.src}"

				git clone --depth=1 --branch=develop http://github.com/samtools/bcftools
				git clone --depth=1 http://github.com/samtools/htslib
				cd htslib
				make -j
				cp "{params.src}/htslib/tabix" "{output[0]}"
				cp "{params.src}/htslib/bgzip" "{output[1]}"

				rm -fR "{params.src}"
			) > /dev/null
		"""

rule prog_samtools:
	message:
		"Installing SamTools (a package for manipulation with SAM, BAM and CRAM files). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.SAMTOOLS
	params:
		src=os.path.join(smbl.src_dir,"samtools")
	run:
		shell(
			"""
				(
					rm -fR "{params.src}"
					mkdir -p "{params.src}"
					cd "{params.src}"

					git clone --depth=1 http://github.com/samtools/samtools
					git clone --depth=1 http://github.com/samtools/htslib
				) > /dev/null

			"""
		)
		correct_samtools_make(os.path.join(params.src,"samtools","Makefile"))
		shell(
			"""
				(
					cd "{params.src}/samtools"
					make -j
					cp "{params.src}/samtools/samtools" "{output[0]}"

					rm -fR "{params.src}"
				) > /dev/null
			"""
		)

rule prog_storm:
	message:
		"Compiling SToRM (an NGS read mapper). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.STORM_NUCLEOTIDE,
		smbl.prog.STORM_COLOR
	params:
		src=os.path.join(smbl.src_dir,"storm")
	shell:
		"""
			(
				rm -fR "{params.src}"
				mkdir -p "{params.src}"
				cd "{params.src}"

				svn checkout svn://scm.gforge.inria.fr/svnroot/storm/trunk storm
				cd storm
				make -j
				cp "{params.src}/storm/storm-nucleotide" "{output[0]}"
				cp "{params.src}/storm/storm-color" "{output[1]}"

				rm -fR "{params.src}"
			) > /dev/null
		"""

rule prog_mason:
	message:
		"Installing Mason (an NGS read simulator). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.MASON
	params:
		src=os.path.join(smbl.src_dir,"mason")
	shell:
		"""
			(
				rm -fR "{params.src}"
				mkdir -p "{params.src}"
				cd "{params.src}"

				git clone --depth 1 http://github.com/seqan/seqan/
				cd seqan
				cmake .
				cd apps/mason2
				make -j
				cp "{params.src}/seqan/bin/mason_simulator" "{output[0]}"

				rm -fR "{params.src}"
			) > /dev/null
		"""

rule prog_bfast:
	message:
		"Installing BFast (an NGS read mapper). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.BFAST
	params:
		src=os.path.join(smbl.src_dir,"bfast")
	shell:
		"""
			(
				rm -fR "{params.src}"
				mkdir -p "{params.src}"
				cd "{params.src}"

				git clone --depth 1 http://github.com/nh13/bfast
				cd bfast
				sh autogen.sh
				./configure
				make -j
				cp "{params.src}/bfast/bfast/bfast" "{output[0]}"

				rm -fR "{params.src}"
			) > /dev/null
		"""

rule prog_gem:
	message:
		"Installing GEM (an NGS read mapper). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.GEM_INDEXER,
		smbl.prog.GEM_MAPPER,
		smbl.prog.GEM_2_SAM
	params:
		src=os.path.join(smbl.src_dir,"gem")
	run:
		if not smbl.is_linux():
			raise RunTimeError("Unsupported OS")

		shell(
			"""
				(
					rm -fR "{params.src}"
					mkdir -p "{params.src}"
				) > /dev/null

				curl -L --insecure -o "{params.src}/gem.tbz2" "http://sourceforge.net/projects/gemlibrary/files/gem-library/Binary%20pre-release%203/GEM-binaries-Linux-x86_64-core_i3-20130406-045632.tbz2/download"

				(
					cd "{params.src}"

					tar xf gem.tbz2
					cd GEM-binaries-Linux-x86_64-core_i3-20130406-045632/bin
					cp gem-indexer "{output[0]}"
					cp gem-mapper "{output[1]}"
					cp gem-2-sam "{output[2]}"

					rm -fR "{params.src}"
				) > /dev/null
			"""
		)

rule prog_freec:
	message:
		"Installing FREEC. "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.FREEC
	params:
		src=os.path.join(smbl.src_dir,"freec")
	run:
		shell(
			"""
				(
					rm -fR "{params.src}"
					mkdir -p "{params.src}"
				) > /dev/null

				curl -L --insecure -o "{params.src}/freec.tar.gz" "http://bioinfo-out.curie.fr/projects/freec/src/FREEC_Linux64.tar.gz"

				(
					cd "{params.src}"

					tar xf freec.tar.gz
					make -j clean
					make -j
					cp freec "{output[0]}"

					rm -fR "{params.src}"
				) > /dev/null
			"""
		)

rule prog_perm:
	message:
		"Compiling PerM (an NGS read mapper). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.PERM
	params:
		src=os.path.join(smbl.src_dir,"perm")
	run:
		shell(
			"""
				(
					rm -fR "{params.src}"
					mkdir -p "{params.src}"
				) > /dev/null

				curl -L --insecure -o "{params.src}/perm.tar.gz" "https://perm.googlecode.com/files/PerM4Source.tar.gz"

				(
					cd "{params.src}"

					tar xf perm.tar.gz
					cd Source
					make -j
					cp perm "{output[0]}"

					rm -fR "{params.src}"
				) > /dev/null
			"""
		)

rule prog_pbsim:
	message:
		"Compiling PBsim (an NGS read simulator of PacBio reads). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.PBSIM
	params:
		src=os.path.join(smbl.src_dir,"perm")
	run:
		shell(
			"""
				(
					rm -fR "{params.src}"
					mkdir -p "{params.src}"
				) > /dev/null

				curl -L --insecure -o "{params.src}/pbsim.tar.gz" "https://pbsim.googlecode.com/files/pbsim-1.0.3.tar.gz"

				(
					cd "{params.src}"

					tar xf pbsim.tar.gz
					cd pbsim-1.0.3
					./configure
					make -j
					cp src/pbsim "{output[0]}"

					rm -fR "{params.src}"
				) > /dev/null
			"""
		)

rule prog_mrsfast:
	message:
		"Installing mrsFAST (an NGS read mapper). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.MRSFAST
	params:
		src=os.path.join(smbl.src_dir,"mrsfast")
	shell:
		"""
			(
				rm -fR "{params.src}"
				mkdir -p "{params.src}"
				cd "{params.src}"

				git clone --depth 1 git://git.code.sf.net/p/mrsfast/code
				cd code
				make
				cp mrsfast "{output[0]}"

				rm -fR "{params.src}"
			) > /dev/null
		"""

rule prog_mrfast:
	message:
		"Compiling mrFAST (an NGS read mapper). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.MRFAST
	params:
		src=os.path.join(smbl.src_dir,"mrfast")
	shell:
		"""
			(
				rm -fR "{params.src}"
				mkdir -p "{params.src}"
				cd "{params.src}"

				git clone --depth 1 http://github.com/BilkentCompGen/mrfast
				cd mrfast
				make -j
				cp mrfast "{output[0]}"

				rm -fR "{params.src}"
			) > /dev/null
		"""

rule prog_drfast:
	message:
		"Installing drFAST (an NGS read mapper). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.DRFAST
	params:
		src=os.path.join(smbl.src_dir,"drfast")
	shell:
		"""
			(
				rm -fR "{params.src}"
				mkdir -p "{params.src}"
				cd "{params.src}"

				git clone --depth 1 http://github.com/BilkentCompGen/drfast
				cd drfast
				make -j
				cp drfast "{output[0]}"

				rm -fR "{params.src}"
			) > /dev/null
		"""

rule prog_sirfast:
	message:
		"Installing sirFAST (an NGS read mapper). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.SIRFAST
	params:
		src=os.path.join(smbl.src_dir,"sirfast")
	shell:
		"""
			(
				rm -fR "{params.src}"
				mkdir -p "{params.src}"
				cd "{params.src}"

				git clone --depth 1 http://github.com/BilkentCompGen/sirfast
				cd sirfast
				make -j
				cp sirfast "{output[0]}"

				rm -fR "{params.src}"
			) > /dev/null
		"""

rule prog_bowtie2:
	message:
		"Compiling Bowtie2 (an NGS read mapper). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.BOWTIE2,
		smbl.prog.BOWTIE2_ALIGN_L,
		smbl.prog.BOWTIE2_ALIGN_S,
		smbl.prog.BOWTIE2_BUILD,
		smbl.prog.BOWTIE2_BUILD_L,
		smbl.prog.BOWTIE2_BUILD_S,
		smbl.prog.BOWTIE2_INSPECT,
		smbl.prog.BOWTIE2_INSPECT_L,
		smbl.prog.BOWTIE2_INSPECT_S,
	params:
		src=os.path.join(smbl.src_dir,"bowtie"),
		bindir=os.path.dirname(smbl.prog.BOWTIE2),
	shell:
		"""
			(
				rm -fR "{params.src}"
				mkdir -p "{params.src}"
				cd "{params.src}"

				git clone --depth 1 http://github.com/BenLangmead/bowtie2
				cd bowtie2
				make -j
				cp bowtie2* "{params.bindir}"

				rm -fR "{params.src}"
			) > /dev/null
		"""
		

rule prog_last:
	message:
		"Installing LAST (an NGS read mapper). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.LASTAL,
		smbl.prog.LASTDB
	params:
		src=os.path.join(smbl.src_dir,"last"),
	shell:
		"""
			(
				rm -fR "{params.src}"
				mkdir -p "{params.src}"
			) > /dev/null
	
			curl -L --insecure -o "{params.src}/last.zip" http://last.cbrc.jp/last-541.zip

			(
				cd "{params.src}"

				unzip last.zip
				cd last-541
				make -j
				cd src
				cp lastal "{output[0]}"
				cp lastdb "{output[1]}"

				rm -fR "{params.src}"
			) > /dev/null
		"""

rule prog_gnuplot4:
	message:
		"Installing GNUPLOT4 (a program for creating graphical plots). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.GNUPLOT4
	params:
		src=os.path.join(smbl.src_dir,"gnuplot4"),
	shell:
		"""
			(
				rm -fR "{params.src}"
				mkdir -p "{params.src}"
			) > /dev/null

			curl -L --insecure -o "{params.src}/gnuplot.tar.gz" "http://sourceforge.net/projects/gnuplot/files/gnuplot/4.6.6/gnuplot-4.6.6.tar.gz/download"

			(
				cd "{params.src}"

				tar xf gnuplot.tar.gz
				cd gnuplot-4.6.6
				./configure
				make -j
				cd src
				cp gnuplot "{output[0]}"

				rm -fR "{params.src}"
			) > /dev/null
		"""

rule prog_gnuplot5:
	message:
		"Installing GNUPLOT5 (a program for creating graphical plots). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.GNUPLOT5
	params:
		src=os.path.join(smbl.src_dir,"gnuplot5"),
	shell:
		"""
			(
				rm -fR "{params.src}"
				mkdir -p "{params.src}"
			) > /dev/null

			curl -L --insecure -o "{params.src}/gnuplot.tar.gz" "http://sourceforge.net/projects/gnuplot/files/gnuplot/5.0.0/gnuplot-5.0.0.tar.gz/download"

			(
				cd "{params.src}"

				tar xf gnuplot.tar.gz
				cd gnuplot-5.0.0
				./configure
				make -j
				cd src
				cp gnuplot "{output[0]}"

				rm -fR "{params.src}"
			) > /dev/null
		"""

rule curesim:
	message:
		"Installing CuReSim (an NGS read simulator). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.CURESIM,
	params:
		src=os.path.join(smbl.src_dir,"curesim"),
	shell:
		"""
			(
				rm -fR "{params.src}"
				mkdir -p "{params.src}"
			) > /dev/null

			curl -L --insecure -o "{params.src}/curesim.zip" "http://www.pegase-biosciences.com/wp-content/uploads/2013/04/CuReSim1.1.zip"

			(
				cd "{params.src}"

				unzip curesim.zip
				cd CuReSim1.1
				cp CuReSim.jar "{output[0]}"
				chmod +x "{output[0]}"

				rm -fR "{params.src}"
			)
		"""


rule curesim_eval:
	message:
		"Installing CuReSim_eval (an evalution tool for CuReSim). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.CURESIM_EVAL,
	params:
		src=os.path.join(smbl.src_dir,"curesim_eval"),
	shell:
		"""
			(
				rm -fR "{params.src}"
				mkdir -p "{params.src}"
			) > /dev/null

			curl -L --insecure -o "{params.src}/curesim_eval.zip" "http://www.pegase-biosciences.com/wp-content/uploads/2013/04/CuReSimEval1.1.zip"

			(
				cd "{params.src}"

				unzip curesim_eval.zip
				cd CuReSimEval1.1
				cp CuReSimEval.jar "{output[0]}"
				chmod +x "{output[0]}"

				rm -fR "{params.src}"
			) > /dev/null
		"""


rule prog_twobittofa:
	message:
		"Installing twoBitToFa (a tool for conversion of genomic data). "+_SUFFIX_INSTALLATION
	output:
		smbl.prog.TWOBITTOFA
	run:
		if smbl.is_linux() and smbl.is_os_64bit:
			url="http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/twoBitToFa"
		elif smbl.is_mac() and smbl.is_os_64bit:
			url="http://hgdownload.cse.ucsc.edu/admin/exe/macOSX.x86_64/twoBitToFa"
		elif smbl.is_mac():
			url="http://hgdownload.cse.ucsc.edu/admin/exe/macOSX.i386/twoBitToFa"
		else:
			raise RunTimeError("For your OS, twoBitToFa is not precompiled")

		shell("""
			curl -L --insecure -o "{prog}" "{url}"
			chmod +x "{prog}"
		""".format(prog=output[0],url=url))
